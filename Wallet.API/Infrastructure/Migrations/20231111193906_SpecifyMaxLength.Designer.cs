// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wallet.Implementation;

#nullable disable

namespace Wallet.API.Infrastructure.Migrations
{
    [DbContext(typeof(WalletDbContext))]
    [Migration("20231111193906_SpecifyMaxLength")]
    partial class SpecifyMaxLength
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Wallet.Domain.Entities.CurrencyBucket", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CurrencyBucketId");

                    b.Property<decimal>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("CurrencyBuckets", (string)null);
                });

            modelBuilder.Entity("Wallet.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TransactionId");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CurrencyBucketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReferencedTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyBucketId");

                    b.HasIndex("ReferencedTransactionId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Wallet.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WalletId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("Wallet.Domain.Entities.CurrencyBucket", b =>
                {
                    b.HasOne("Wallet.Domain.Entities.Wallet", null)
                        .WithMany("Buckets")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Wallet.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Wallet.Domain.Entities.CurrencyBucket", null)
                        .WithMany("Transactions")
                        .HasForeignKey("CurrencyBucketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Wallet.Domain.Entities.Transaction", "ReferencedTransaction")
                        .WithMany()
                        .HasForeignKey("ReferencedTransactionId");

                    b.Navigation("ReferencedTransaction");
                });

            modelBuilder.Entity("Wallet.Domain.Entities.CurrencyBucket", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Wallet.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Buckets");
                });
#pragma warning restore 612, 618
        }
    }
}
